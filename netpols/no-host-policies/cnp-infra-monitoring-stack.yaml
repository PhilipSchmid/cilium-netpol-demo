# -- Default rule
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-within-namespace
  namespace: monitoring
spec:
  description: Allow NS internal traffic, block everything else
  endpointSelector: {}
  ingress:
  - fromEndpoints:
    - {}
  egress:
  - toEndpoints:
    - {}
# -- Egress rules
---
apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: prometheus-to-metrics
spec:
  description: Allow Prometheus to scrape all infra metric endpoints and the ones of namespaces which expose them
  endpointSelector:
    matchLabels:
      k8s:app.kubernetes.io/name: prometheus
      k8s:io.kubernetes.pod.namespace: monitoring
  egress:
  - toEntities:
    - host
    - remote-node
    - kube-apiserver
  - toEndpoints:
    - matchLabels:
        k8s:io.cilium.k8s.namespace.labels.metrics: "true"
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: kube-prometheus-stack-to-kapi
  namespace: monitoring
spec:
  description: Allow kube-prometheus-stack components to reach KAPI
  endpointSelector:
    matchExpressions:
    - key: k8s:app.kubernetes.io/instance
      operator: In
      values:
      - kube-prometheus-stack-prometheus
      - kube-prometheus-stack
  egress:
  - toEntities:
    - kube-apiserver
    toPorts:
    - ports:
      - port: "6443"
        protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: metrics-server-to-kubelet-metrics
  namespace: monitoring
spec:
  description: Allow metrics-server to scrape Kubelet metrics
  endpointSelector:
    matchLabels:
      k8s:app.kubernetes.io/name: metrics-server
  egress:
  - toEntities:
    - host
    - remote-node
    toPorts:
    - ports:
      - port: "10250"
        protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: metrics-server-to-kapi
  namespace: monitoring
spec:
  description: Allow metrics-server to access KAPI
  endpointSelector:
    matchLabels:
      k8s:app.kubernetes.io/name: metrics-server
  egress:
  - toEntities:
    - kube-apiserver
    toPorts:
    - ports:
      - port: "6443"
        protocol: TCP
# Only required if Alertmanager is connected to Slack.
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: alertmanager-to-slack-webhook
  namespace: monitoring
spec:
  description: Allow alertmanager to reach Slack webhook
  endpointSelector:
    matchLabels:
      k8s:app.kubernetes.io/name: alertmanager
  egress:
  - toFQDNs:
    - matchName: "api.slack.com"
    - matchName: "hooks.slack.com"
    toPorts:
    - ports:
      - port: "443"
        protocol: TCP
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: grafana-to-kapi
  namespace: monitoring
spec:
  description: Allow Grafana to reach KAPI (to get dashboard and datasource CMs)
  endpointSelector:
    matchLabels:
      k8s:app.kubernetes.io/name: grafana
  egress:
  - toEntities:
    - kube-apiserver
    toPorts:
    - ports:
      - port: "6443"
        protocol: TCP
# -- Ingress rules
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: remote-node-to-prometheus
  namespace: monitoring
spec:
  description: Allow Remote-Node to access Prometheus and metrics-server
  endpointSelector:
    matchExpressions:
    - key: k8s:app.kubernetes.io/instance
      operator: In
      values:
      - kube-prometheus-stack
      - metrics-server
  ingress:
  - fromEntities:
    - remote-node
    toPorts:
    - ports:
      - port: "10250"
        protocol: TCP
